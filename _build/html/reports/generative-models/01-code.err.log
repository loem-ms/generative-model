Traceback (most recent call last):
  File "/Users/mengsayloem/Workspace/generative-model/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/mengsayloem/Workspace/generative-model/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/mengsayloem/Workspace/generative-model/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.3/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/mengsayloem/Workspace/generative-model/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/mengsayloem/Workspace/generative-model/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/mengsayloem/Workspace/generative-model/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Set the style of seaborn plot
sns.set(style='whitegrid')

# Parameters for multiple Gaussian distributions
means = [-4, -1, 0, 2, 5]  # Mean of each Gaussian
std_devs = [0.8, 0.5, 1.2, 0.9, 1.0]  # Standard deviations of each Gaussian
n_samples = 300  # Number of samples from each Gaussian

# Generate data from each Gaussian distribution
data = np.concatenate([np.random.normal(mean, std, n_samples) for mean, std in zip(means, std_devs)])

# Create the histogram of the sampled data
sns.histplot(data, kde=False, color='blue', stat='density', bins=50, label='Sampled Mixture Data')

# Plot the true distribution curves for each Gaussian component
#x = np.linspace(min(means) - 3 * max(std_devs), max(means) + 3 * max(std_devs), 1000)
#for mean, std in zip(means, std_devs):
#    plt.plot(x, norm.pdf(x, mean, std) * (1/len(means)), 'k--', linewidth=1.5)  # Scaled by the mixture weight

# Sum of all true distribution curves
total_density = np.sum([norm.pdf(x, mean, std) for mean, std in zip(means, std_devs)], axis=0) / len(means)
plt.plot(x, total_density, 'r', linewidth=2, label='Total Mixture Distribution')

# Adding labels and title
plt.title('Histogram and True Distribution for a Complex Mixture of Gaussians')
plt.xlabel('Data points')
plt.ylabel('Density')

# Add a legend to the plot
plt.legend()

# Show the plot
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 25[0m
[1;32m     17[0m sns[38;5;241m.[39mhistplot(data, kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mblue[39m[38;5;124m'[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, bins[38;5;241m=[39m[38;5;241m50[39m, label[38;5;241m=[39m[38;5;124m'[39m[38;5;124mSampled Mixture Data[39m[38;5;124m'[39m)
[1;32m     19[0m [38;5;66;03m# Plot the true distribution curves for each Gaussian component[39;00m
[1;32m     20[0m [38;5;66;03m#x = np.linspace(min(means) - 3 * max(std_devs), max(means) + 3 * max(std_devs), 1000)[39;00m
[1;32m     21[0m [38;5;66;03m#for mean, std in zip(means, std_devs):[39;00m
[1;32m     22[0m [38;5;66;03m#    plt.plot(x, norm.pdf(x, mean, std) * (1/len(means)), 'k--', linewidth=1.5)  # Scaled by the mixture weight[39;00m
[1;32m     23[0m 
[1;32m     24[0m [38;5;66;03m# Sum of all true distribution curves[39;00m
[0;32m---> 25[0m total_density [38;5;241m=[39m np[38;5;241m.[39msum([[43mnorm[49m[38;5;241m.[39mpdf(x, mean, std) [38;5;28;01mfor[39;00m mean, std [38;5;129;01min[39;00m [38;5;28mzip[39m(means, std_devs)], axis[38;5;241m=[39m[38;5;241m0[39m) [38;5;241m/[39m [38;5;28mlen[39m(means)
[1;32m     26[0m plt[38;5;241m.[39mplot(x, total_density, [38;5;124m'[39m[38;5;124mr[39m[38;5;124m'[39m, linewidth[38;5;241m=[39m[38;5;241m2[39m, label[38;5;241m=[39m[38;5;124m'[39m[38;5;124mTotal Mixture Distribution[39m[38;5;124m'[39m)
[1;32m     28[0m [38;5;66;03m# Adding labels and title[39;00m

[0;31mNameError[0m: name 'norm' is not defined

